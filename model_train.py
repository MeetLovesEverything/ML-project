# -*- coding: utf-8 -*-
"""Copy of Audio language Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1shLYOu_100vSsZr7AenddTdupybyxqXq
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
hbchaitanyabharadwaj_audio_dataset_with_10_indian_languages_path = kagglehub.dataset_download('hbchaitanyabharadwaj/audio-dataset-with-10-indian-languages')

print('Data source import complete.')

import shutil


dataset_path = hbchaitanyabharadwaj_audio_dataset_with_10_indian_languages_path
target_dir = "/content/data/audio_dataset"
shutil.copytree(dataset_path, target_dir, dirs_exist_ok=True)

print(f"Copied to: {target_dir}")
print(os.listdir(target_dir))

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import os
audio_files = os.listdir('/content/data/audio_dataset/Language Detection Dataset')
for files in audio_files:
    print(files)
print(len(audio_files))

import librosa
import numpy as np
import IPython.display as ipd
import matplotlib.pyplot as plt
import librosa.display
import seaborn as sns
import warnings
from glob import glob
import pandas as pd

warnings.filterwarnings('ignore')

#Gujrati language
file_name = "/content/data/audio_dataset/Language Detection Dataset/Gujarati/10001.mp3"
data,sample_rate = librosa.load(file_name)
sns.lineplot(data=data)
file = ipd.Audio(file_name)
ipd.display(file)

librosa.feature.mfcc(y=data,sr=sample_rate,n_mfcc=40) #transform the linear frequency scale into mel scale

#Marathi
import librosa
file_path = "/content/data/audio_dataset/Language Detection Dataset/Marathi/100.mp3"
audio_data,sample_rate = librosa.load(file_path)
sns.lineplot(audio_data)
ipd.display(ipd.Audio(file_path))

!pip install pydub

from pydub import AudioSegment

try:
  # Open the MP3 audio file using pydub
  sound = AudioSegment.from_mp3(file_path)

  # Get the frame rate (number of frames per second)
  frame_rate = sound.frame_rate

  # Get the number of channels (mono or stereo)
  channels = sound.channels

  # Access the audio data (raw bytes)
  audio_data = sound.raw_data

  print(f"Frame Rate: {frame_rate} Hz")
  print(f"Channels: {channels}")

  # You can perform further processing on the audio data here

except OSError as e:
  print(f"Error reading MP3 file: {e}")

audio_data = sound.get_array_of_samples()
plt.plot(audio_data)
plt.title("Channels")
plt.legend()
plt.grid(True)

mfcc = librosa.feature.mfcc(y=data,sr=sample_rate,n_mfcc=40)
mfcc_mean = np.mean(mfcc.T,axis=0)
mfcc_mean

root_directory = "/content/data/audio_dataset/Language Detection Dataset"

def feature_extractor(file):
    audio_data,sample_rate = librosa.load(file,duration=1)
    mfcc_feature = librosa.feature.mfcc(y=audio_data,sr=sample_rate,n_mfcc=40)
    scaled_feature = np.mean(mfcc_feature.T,axis=0)
    return scaled_feature

category = os.listdir(root_directory)

!apt-get install ffmpeg

mfccs_feature = []
classes = []

for folder in os.listdir(root_directory):
    if folder != 'Punjabi':
        folder_path = os.path.join(root_directory, folder)
        for file in os.listdir(folder_path)[:5000]:
            file_path = os.path.join(folder_path, file)
            try:
                features = feature_extractor(file_path)
                mfccs_feature.append(features)
                classes.append(folder)
            except Exception as e:
                print(f"Skipping corrupted or unreadable file: {file_path} â€” {e}")

df = pd.DataFrame({'MFCC_Features': mfccs_feature, 'Class': classes})
df.shape

new_df = df.sample(44999)
new_df.head()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dropout,Dense

lbl = LabelEncoder()
y = lbl.fit_transform(new_df['Class'])
X = np.array(new_df['MFCC_Features'].tolist())
y = np.array(y.tolist())

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)

model = Sequential()
model.add(Dense(100,activation='relu',input_shape=(40,)))
model.add(Dropout(0.5))

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(225,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(9,activation='softmax'))

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history = model.fit(X_train,y_train,epochs=30,batch_size=32,validation_data=(X_test,y_test))

history_df = pd.DataFrame({'accuracy': history.history['accuracy'], 'val_accuracy': history.history['val_accuracy']})
history_df.plot()

model.evaluate(X_test,y_test)

y_pred = model.predict(X_test)
y_pred = (y_pred>0.5).astype(int)
y_pred = np.argmax(y_pred,axis=1)
y_pred

cnf = confusion_matrix(y_test,y_pred)
ConfusionMatrixDisplay(cnf,display_labels=lbl.classes_).plot()
plt.xticks(rotation=90)
plt.show()

model.save('language_model.h5')

from google.colab import files
files.download('language_model.h5')